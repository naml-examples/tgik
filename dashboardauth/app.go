// Copyright © 2021 Kris Nóva <kris@nivenly.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//   ███╗   ██╗ █████╗ ███╗   ███╗██╗
//   ████╗  ██║██╔══██╗████╗ ████║██║
//   ██╔██╗ ██║███████║██╔████╔██║██║
//   ██║╚██╗██║██╔══██║██║╚██╔╝██║██║
//   ██║ ╚████║██║  ██║██║ ╚═╝ ██║███████╗
//   ╚═╝  ╚═══╝╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝
//

package dashboardauth

import (
	"context"

	corev1 "k8s.io/api/core/v1"
	rbacv1 "k8s.io/api/rbac/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes"
)

// Version is the current release of your application.
var Version string = "0.0.2"

//func main() {
//// Load the application into the NAML registery
//// Note: naml.Register() can be used multiple times.
//naml.Register(NewApp("Svc-Dashboard", "Application autogenerated from NAML v0.3.0"))

//// Run the generic naml command line program with
//// the application loaded.
//err := naml.RunCommandLine()
//if err != nil {
//fmt.Println(err.Error())
//os.Exit(1)
//}
//}

// App is a very important grown up business application.
type App struct {
	metav1.ObjectMeta
	description string
	objects     []runtime.Object
	// ----------------------------------
	// Add your configuration fields here
	// ----------------------------------
}

// NewApp will create a new instance of App.
//
// See https://github.com/naml-examples for more examples.
//
// This is where you pass in fields to your application (similar to Values.yaml)
// Example: func NewApp(name string, example string, something int) *App
func NewApp(name, description string) *App {
	return &App{
		description: description,
		ObjectMeta: metav1.ObjectMeta{
			Name:            name,
			ResourceVersion: Version,
		},
		// ----------------------------------
		// Add your configuration fields here
		// ----------------------------------
	}
}

func (a *App) Install(client *kubernetes.Clientset) error {
	var err error

	admin_userServiceAccount := &corev1.ServiceAccount{
		TypeMeta: metav1.TypeMeta{
			Kind:       "ServiceAccount",
			APIVersion: "corev1",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name:      a.Name,
			Namespace: "kubernetes-dashboard",
		},
	}
	a.objects = append(a.objects, admin_userServiceAccount)

	if client != nil {
		_, err = client.CoreV1().ServiceAccounts("kubernetes-dashboard").Create(context.TODO(), admin_userServiceAccount, metav1.CreateOptions{})
		if err != nil {
			return err
		}
	}

	admin_userClusterRoleBinding := &rbacv1.ClusterRoleBinding{
		TypeMeta: metav1.TypeMeta{
			Kind:       "ClusterRoleBinding",
			APIVersion: "rbac.authorization.k8s.io/rbacv1",
		},
		ObjectMeta: metav1.ObjectMeta{Name: "admin-user"},
		Subjects: []rbacv1.Subject{rbacv1.Subject{
			Kind:      "ServiceAccount",
			Name:      a.Name,
			Namespace: "kubernetes-dashboard",
		}},
		RoleRef: rbacv1.RoleRef{
			APIGroup: "rbac.authorization.k8s.io",
			Kind:     "ClusterRole",
			Name:     a.Name,
		},
	}
	a.objects = append(a.objects, admin_userClusterRoleBinding)

	if client != nil {
		_, err = client.RbacV1().ClusterRoleBindings().Create(context.TODO(), admin_userClusterRoleBinding, metav1.CreateOptions{})
		if err != nil {
			return err
		}
	}

	return err
}

func (a *App) Uninstall(client *kubernetes.Clientset) error {
	var err error

	if client != nil {
		err = client.CoreV1().ServiceAccounts("kubernetes-dashboard").Delete(context.TODO(), "admin-user", metav1.DeleteOptions{})
		if err != nil {
			return err
		}
	}

	if client != nil {
		err = client.RbacV1().ClusterRoleBindings().Delete(context.TODO(), "admin-user", metav1.DeleteOptions{})
		if err != nil {
			return err
		}
	}

	return err
}

func (a *App) Description() string {
	return a.description
}

func (a *App) Meta() *metav1.ObjectMeta {
	return &a.ObjectMeta
}

func (a *App) Objects() []runtime.Object {
	return a.objects
}
